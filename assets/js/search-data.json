{
  
    
        "post0": {
            "title": "Title",
            "content": "class Question: def _init_(self, prompt, answer): self.prompt = prompt self.answer = answer question_prompts =[ &quot;What is Iteration defined as? n(a) Sequence of instructions n(b) Repetition of a process n(c) Boolean n(d) List&quot;, &quot;What is a List defined as? n(a) Collection of data in a sequence that is a iterable n(b) Numbers n(c) Selection between two paths based on solution n(d) Groceries&quot;, &quot;What does a “FOR LOOP” do? What is the variable, “I”, used for? n(a) FOR LOOP repeats a function for a set number of times; I is the number of times repeated n(b) I is a parameter of the function, and for only performs an action if certain circumstances are met n(c) The FOR LOOP is a function and I the absolute value of the function n(d) The FOR LOOP controls the order functions are called on outside of the for loop; I is the number of functions it controls&quot;, &quot;How can we add something to the end of a list? n(a) Use + sign n(b) The word Add n(c) Append n(d) Extend&quot;, &quot;What is Indexing / List Index defined as? n(a) Contents of List n(b) The position of an element in a list, starting from 0 n(c) Alphabetical Ordered List n(d) Measurement of List&quot;, &quot;What does the POP command do? n(a) Removes a list n(b) Adds a list n(c) Adds to the end of List n(d) Removes the last item from a list&quot;, &quot;What is Base 0 Indexing?/n(a) Binary n(b) Mutation n(c) Sequence demarcated with an Index starting from 1 n(d) Seguence demarcated with an Index starting from 0&quot; ] questions = [ Question(question_prompts[0], &quot;b&quot;), Question(question_prompts[1], &quot;a&quot;), Question(question_prompts[2], &quot;a&quot;), Question(question_prompts[3], &quot;c&quot;), Question(question_prompts[4], &quot;d&quot;), Question(question_prompts[5], &quot;d&quot;), Question(question_prompts[6], &quot;d&quot;) ] def run_test(questions): score = 0 for question in questions: answer = input(question.prompts) if answer == question.answer: score += 1 print(&quot;You got &quot; +str(score) +&#39;/&#39; + str(len(questions)) + &quot;correct&quot;) run_quiz(questions) . TypeError Traceback (most recent call last) /Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb Cell 1 in &lt;cell line: 17&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; self.answer = answer &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; question_prompts =[ &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; &#34;What is Iteration defined as? n(a) Sequence of instructions n(b) Repetition of a process n(c) Boolean n(d) List&#34;, &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; &#34;What is a List defined as? n(a) Collection of data in a sequence that is a iterable n(b) Numbers n(c) Selection between two paths based on solution n(d) Groceries&#34;, (...) &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; &#34;What is Base 0 Indexing?/n(a) Binary n(b) Mutation n(c) Sequence demarcated with an Index starting from 1 n(d) Seguence demarcated with an Index starting from 0&#34; &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; ] &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; questions = [ &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; Question(question_prompts[0], &#34;b&#34;), &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; Question(question_prompts[1], &#34;a&#34;), &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; Question(question_prompts[2], &#34;a&#34;), &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; Question(question_prompts[3], &#34;c&#34;), &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; Question(question_prompts[4], &#34;d&#34;), &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; Question(question_prompts[5], &#34;d&#34;), &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; Question(question_prompts[6], &#34;d&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; ] &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; def run_test(questions): &lt;a href=&#39;vscode-notebook-cell:/Users/advayshindikar/vscode/pgk/_notebooks/2022-12-04-quiz.ipynb#W0sZmlsZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; score = 0 TypeError: Question() takes no arguments .",
            "url": "https://pgk-lang.github.io/pgk/2022/12/04/quiz.html",
            "relUrl": "/2022/12/04/quiz.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Section 10 - Lists",
            "content": "Big Ideas . Understanding how to edit lists by adding, inserting, and removing data | Using loops to iterate through lists and abstract data | Determine the results or side effects of iteration statements | Write sorting algorithms using iteration | . Necessary Vocabulary . Indexing / List Index - The position of an element in a list, starting from 0 | append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. | Elements [in a list] - An item in a list. | Nesting - Having one data type or function inside another data type or function, such as lists or loops. | array - Another name for a list, depends on the language | . Examples of List Operations . Extra Resource: Documentation . Language List Documentation . Python | link | . Javascript | link | . What are Lists? . Lists are a collection of data in a sequence that is an iterable | Each sequence is demarcated with an index, starting from 0. This is known as base 0 indexing | In memory, it is stored as a variable name with multiple pointers to each variable stored in a certain order | Lists can also be called arrays | Lists have methods that act upon the list and change them. This moves the pointers within RAM to change the parts of the list. | . A MASSIVE NOTE: Lists methods Mutate, meaning they actively change the list, but they don&#39;t return anything. This means that return a None-type, which you cannot manipulate . Adding Something to a List . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;, &quot;pomegranate&quot;] print(f&quot;Fruits before append: {fruits}&quot;) fruits.append(&quot;dragonfruit&quot;) # ADDS TO THE END OF THE LIST print(f&quot;Fruits after append: {fruits}&quot;) . Fruits before append: [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;] Fruits after append: [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;, &#39;dragonfruit&#39;] . food = [&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;, &quot;pomegranate&quot;] vegetables = [&quot;carrot&quot;, &quot;cucumber&quot;, &quot;eggplant&quot;] print(f&quot;Fruits before extend: {fruits}&quot;) fruits.extend(vegetables) # adds the vegetable list to the end of the food list print(f&quot;Fruits after extend: {fruits}&quot;) . Fruits before extend: [&#39;apple&#39;, &#39;dragonfruit&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;] Fruits after extend: [&#39;apple&#39;, &#39;dragonfruit&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;, &#39;carrot&#39;, &#39;cucumber&#39;, &#39;eggplant&#39;] . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;, &quot;pomegranate&quot;] print(f&quot;Fruits before insert: {fruits}&quot;) fruits.insert(1, &quot;dragonfruit&quot;) print(f&quot;Fruits after insert: {fruits}&quot;) . Fruits before insert: [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;] Fruits after insert: [&#39;apple&#39;, &#39;dragonfruit&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;] . Removing Items . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;, &quot;pomegranate&quot;] print(f&quot;Fruits before pop: {fruits}&quot;) fruits.pop() print(f&quot;Fruits after pop (no parameter): {fruits}&quot;) fruits.pop(0) print(f&quot;Fruits after pop (specifying index 0): {fruits}&quot;) . Fruits before pop: [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;] Fruits after pop (no parameter): [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;] Fruits after pop (specifying index 0): [&#39;banana&#39;, &#39;kiwi&#39;] . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;, &quot;pomegranate&quot;] print(f&quot;Fruits before remove: {fruits}&quot;) fruits.remove(&quot;apple&quot;) print(f&quot;Fruits after remove (removing apple): {fruits}&quot;) fruits.remove(&quot;kiwi&quot;) print(f&quot;Fruits after remove (removing kiwi): {fruits}&quot;) . Fruits before remove: [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;] Fruits after remove (removing apple): [&#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;] Fruits after remove (removing kiwi): [&#39;banana&#39;, &#39;pomegranate&#39;] . Practice . Consider the Following Code Segment . { lst = [&quot;your&quot;, &quot;a&quot;, &quot;very&quot;, &quot;skilled&quot;, &quot;individual&quot;] lst.append(&quot;Person&quot;) lst.pop() lst.remove(&quot;your&quot;) lst.insert(0, &quot;you&#39;re&quot;) print(lst) } . Answer! [&quot;you&#39;re&quot;, &#39;a&#39;, &#39;very&#39;, &#39;skilled&#39;, &#39;individual&#39;] In each instance, would we use a list? We want to represent a sequence of children in order. We want to represent the number of animals in a zoo. We want to repeatedly find the derivative of a number. We want to represent Key value pairs of schools and their quantities We want to represent the grades of a classroom . Answer! 1. Yes 2 No 3. No 4. No 5. Yes Consider the Following Code Segment . { lst = [12,3,4,5,14,6,1,234] lst.pop() lst.append(&#39;x&#39;) lst.insert(lst[0]) print(lst.pop()) } . Answer! :P try and get it without checking the answer! Iterating Through a List and Sorting . What is Iteration? . We can use for and while loops to iterate over loops! Then we can manipulate each element in the list for a certain purpose (adding, adding to another list, removing, etc.) However, recall that each list item is at an index, and we can&#39;t exceed the number of indices that an element has, otherwise we get a IndexError: List out of range . Examples . Sorting algorithms . Insertion Sort: . Takes in unsorted list with numerical elements and returns with numerical elements in order | iterates through every element one at a time | check if element before the selected element is greater than or less than the selected element and adjust accordingly | . arr = [9,1,5,6,3,7,2,8] print(f&quot;array before sort {arr}&quot;) def insertion_sort(arr): for index in range(1,len(arr)): # repeats through length of the array value = arr[index] i = index - 1 while i &gt;= 0: if value &lt; arr[i]: arr[i+1] = arr[i] # shift number in slot i to the right arr[i] = value # shift value left into slot i i = i - 1 else: break IS = insertion_sort(arr) print(f&quot;array after sort {arr}&quot;) . array before sort [9, 1, 5, 6, 3, 7, 2, 8] array after sort [1, 2, 3, 5, 6, 7, 8, 9] . &#39;&#39;&#39; python3 -m pip install --upgrade pip python3 -m pip install --upgrade Pillow &#39;&#39;&#39; from PIL import Image im = Image.open(&quot;/Users/vn1/Documents/insertionsort.png&quot;) display(im) . Hacks/Code Application: . similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array | . | . &#39;&#39;&#39; python3 -m pip install --upgrade pip python3 -m pip install --upgrade Pillow &#39;&#39;&#39; from PIL import Image im = Image.open(&quot;/Users/vn1/Documents/bubble_sort.png&quot;) display(im) .",
            "url": "https://pgk-lang.github.io/pgk/lesson/ten",
            "relUrl": "/lesson/ten",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Section 8 - Iteration",
            "content": "",
            "url": "https://pgk-lang.github.io/pgk/lesson/eight",
            "relUrl": "/lesson/eight",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Lesson Plan For Sections 8 and 10 (Unit 3)",
            "content": "Referenced from the APCSP course &amp; exam description by collegeboard . Goals . Section 8: Iteration 2.A Represent algorithmic processes without using a programming language. | 2.B Implement and apply an algorithm. | 4.B Determine the result of code segments | . | Section 10: Lists 2.A Utilize such as append and remove methods to mutate lists | 2.B Implement and apply an algorithm using iteration | 4.B Determine the result of code segments | . | . Planned Homework/Hacks . Section 8: Implement an algorithmic process with iteration to manipulate data Includes I/O | Write pseudocode | # Manipulate data and filter out odd numbers data = [1,2,3,4,5,6,7,8,9,10] new_data = [] for num in data: if num % 2 == 1: continue else: new_data.append(num) print(data) print(new_data) . | . | Example: Fibonnaci sequence using iteration by use of a while loop. | x = 2 # Uses a while loop to iterate through numbers of the fibonacci sequence and stops at the number that which is a factor of 12 while (True): x = x + (x-1) print(x) if(x % 12 == 0): break . | . | . | Section 10: Compare lists &amp; typical variables Access values by index | Useful for iteration | . | Can be mutated &amp; modified class_list = [&quot;rohin&quot;, &quot;rohin2&quot;, &quot;rohin3&quot;] # removes name from list if false is returned when called for name in class_list: if not bool(input(name)): class_name.remove(name) . | . | | . | .",
            "url": "https://pgk-lang.github.io/pgk/posts/lesson",
            "relUrl": "/posts/lesson",
            "date": " • Nov 17, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "About . PGK fastpages made by Rohin, Varalu, Ryan, and Advay .",
          "url": "https://pgk-lang.github.io/pgk/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": "&lt;/body&gt; &lt;/html&gt; ## Blogs .",
          "url": "https://pgk-lang.github.io/pgk/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pgk-lang.github.io/pgk/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}