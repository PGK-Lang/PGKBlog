{
  
    
        "post0": {
            "title": "Section 10-Lists",
            "content": "Big Ideas . Understanding how to edit lists by adding, inserting, and removing data | Using loops to iterate through lists and abstract data | Determine the results or side effects of iteration statements | Write sorting algorithms using iteration | . Necessary Vocabulary . Indexing / List Index - The position of an element in a list, starting from 0 | append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. | Elements [in a list] - An item in a list. | Nesting - Having one data type or function inside another data type or function, such as lists or loops. | array - Another name for a list, depends on the language | . Examples of List Operations . Extra Resource: Documentation . Language List Documentation . Python | link | . Javascript | link | . What are Lists? . Lists are a collection of data in a sequence that is an iterable | Each sequence is demarcated with an index, starting from 0. This is known as base 0 indexing | In memory, it is stored as a variable name with multiple pointers to each variable stored in a certain order | Lists can also be called arrays | Lists have methods that act upon the list and change them. This moves the pointers within RAM to change the parts of the list. | . A MASSIVE NOTE: Lists methods Mutate, meaning they actively change the list, but they don&#39;t return anything. This means that return a None-type, which you cannot manipulate . Adding Something to a List . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;, &quot;pomegranate&quot;] print(f&quot;Fruits before append: {fruits}&quot;) fruits.append(&quot;dragonfruit&quot;) # ADDS TO THE END OF THE LIST print(f&quot;Fruits after append: {fruits}&quot;) . Fruits before append: [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;] Fruits after append: [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;, &#39;dragonfruit&#39;] . food = [&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;, &quot;pomegranate&quot;] vegetables = [&quot;carrot&quot;, &quot;cucumber&quot;, &quot;eggplant&quot;] print(f&quot;Fruits before extend: {fruits}&quot;) fruits.extend(vegetables) # adds the vegetable list to the end of the food list print(f&quot;Fruits after extend: {fruits}&quot;) . Fruits before extend: [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;, &#39;dragonfruit&#39;] Fruits after extend: [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;, &#39;dragonfruit&#39;, &#39;carrot&#39;, &#39;cucumber&#39;, &#39;eggplant&#39;] . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;, &quot;pomegranate&quot;] print(f&quot;Fruits before insert: {fruits}&quot;) fruits.insert(1, &quot;dragonfruit&quot;) print(f&quot;Fruits after insert: {fruits}&quot;) . Fruits before insert: [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;] Fruits after insert: [&#39;apple&#39;, &#39;dragonfruit&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;] . Removing Items . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;, &quot;pomegranate&quot;] print(f&quot;Fruits before pop: {fruits}&quot;) fruits.pop() print(f&quot;Fruits after pop (no parameter): {fruits}&quot;) fruits.pop(0) print(f&quot;Fruits after pop (specifying index 0): {fruits}&quot;) . Fruits before pop: [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;] Fruits after pop (no parameter): [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;] Fruits after pop (specifying index 0): [&#39;banana&#39;, &#39;kiwi&#39;] . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;, &quot;pomegranate&quot;] print(f&quot;Fruits before remove: {fruits}&quot;) fruits.remove(&quot;apple&quot;) print(f&quot;Fruits after remove (removing apple): {fruits}&quot;) fruits.remove(&quot;kiwi&quot;) print(f&quot;Fruits after remove (removing kiwi): {fruits}&quot;) . Fruits before remove: [&#39;apple&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;] Fruits after remove (removing apple): [&#39;banana&#39;, &#39;kiwi&#39;, &#39;pomegranate&#39;] Fruits after remove (removing kiwi): [&#39;banana&#39;, &#39;pomegranate&#39;] . Practice . Question 1 . Consider the Following Code Segment . { lst = [&quot;your&quot;, &quot;a&quot;, &quot;very&quot;, &quot;skilled&quot;, &quot;individual&quot;] lst.append(&quot;Person&quot;) lst.pop() lst.remove(&quot;your&quot;) lst.insert(0, &quot;you&#39;re&quot;) print(lst) } . Answer! [&quot;you&#39;re&quot;, &#39;a&#39;, &#39;very&#39;, &#39;skilled&#39;, &#39;individual&#39;] Question 2 . In each instance, would we use a list? We want to represent a sequence of children in order. We want to represent the number of animals in a zoo. We want to repeatedly find the derivative of a number. We want to represent Key value pairs of schools and their quantities We want to represent the grades of a classroom . Answer! 1. Yes 2 No 3. No 4. No 5. Yes Question 3 . { mgAmounts ← [50, 230, 63, 98, 80, 120, 71, 158, 41] bestAmounts ← [] mgPerDay ← 360 mgMin ← mgPerDay * 0.3 FOR EACH mgAmount IN mgAmounts { IF (mgAmount ≥ mgMin) { &lt;MISSING CODE&gt; } } } . What can replace so that this program will work as expected?&lt;/strong&gt; However, there may multiple answers a. INSERT(bestAmounts, mgAmount) b. APPEND(bestAmounts, mgAmount) c. INSERT(bestAmounts, mgAmounts) d. INSERT(mgAmounts, mgAmount) e. APPEND(bestAmounts, mgAmounts) f. APPEND(mgAmounts, mgAmount)&lt;/p&gt; Answer! Only b, as it is the only item that correctly uses the method and doesn&#39;t improperly extend the length. &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Question 4 . Consider the following code segment . { sevenWonders ← [&quot;Aurora&quot;, &quot;Grand Canyon&quot;, &quot;Great Barrier Reef&quot;, &quot;Guanabara Bay&quot;, &quot;Mount Everest&quot;, &quot;Parícutin&quot;, &quot;Victoria Falls&quot;] sevenWonders[4] ← &quot;Komodo&quot; sevenWonders[6] ← &quot;Table Mountain&quot; } . What does sevenWonders store? . Answer! &quot;Aurora&quot;, &quot;Grand Canyon&quot;, &quot;Great Barrier Reef&quot;, &quot;Komodo&quot;, &quot;Mount Everest&quot;, &quot;Table Mountain&quot;, &quot;Victoria Falls&quot; Question 5 . Consider the Following Code Segment . { lst = [12,3,4,5,14,6,1,234] lst.pop() lst.append(&#39;x&#39;) lst.insert(lst[0]) print(lst.pop()) print(lst) } . What would this display . Answer! :P try and get it without checking the answer! Nested Lists . Uses of Nested lists . Placing lists within lists allows you to have arrays of similar data together, and create complexity. . Some uses include: . Creating 2d Arrays | Storing similar, but slightly different categories (sublists) | Create a matrix | . TwoDArray = [[1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1]] print(TwoDArray[0]) # print first sublist print(TwoDArray[1]) # print second sublist print(TwoDArray[2]) # print third sublist # These 1s and 0s could represent anything. AMAZING DATA ABSTRACTION! . [1, 0, 1, 0, 1, 0, 0, 0] [0, 0, 0, 0, 1, 0, 1, 1] [1, 1, 0, 0, 0, 1, 1, 1] . You can also iterate over these using multiple loops, but we&#39;ll talk about that later . bin_0 = 0 bin_1 = 0 for array in TwoDArray: for bin in array: if bin == 0: bin_0 += 1 elif bin == 1: bin_1 += 1 print(f&quot;Num 0s: {bin_0}&quot;) print(f&quot;Num 1s: {bin_1}&quot;) . Num 0s: 17 Num 1s: 15 . Iterating Through a List and Sorting . Applying Iteration . We can use for and while loops to iterate over loops! Then we can manipulate each element in the list for a certain purpose (adding, adding to another list, removing, etc.) However, recall that each list item is at an index, and we can&#39;t exceed the number of indices that an element has, otherwise we get a IndexError: List out of range . The two programs below are both intended to display the total number of hours from a list of durations in minutes. . Program One: . { totalMins ← 0 durations ← [32, 56, 28, 27] FOR EACH duration IN durations { totalMins ← totalMins + duration } totalHours ← totalMins / 60 DISPLAY(totalHours) } . Program Two . { totalMins ← 0 durations ← [32, 56, 28, 27] FOR EACH duration IN durations { totalMins ← totalMins + duration totalHours ← totalMins / 60 } DISPLAY(totalHours) } . a. Program 1 displays the correct total number of hours, while Program 2 does not. b. Program 2 displays the correct total number of hours, while Program 1 does not. c. Both programs display the correct total number of hours, but Program 1 unnecessarily repeats arithmetic operations. d. Both programs display the correct total number of hours, but Program 2 unnecessarily repeats arithmetic operations. . Answer! Correct answer: d A javelin thrower is writing code to track the distance of their throws and how far they are from their target distance. This is what they have so far: . { totalDistance ← 0 targetDistance ← 90 throw1 ← 85.2 DISPLAY(targetDistance - throw1) totalDistance ← totalDistance + throw1 throw2 ← 82.8 DISPLAY(targetDistance - throw2) totalDistance ← totalDistance + throw2 throw3 ← 87.3 DISPLAY(targetDistance - throw3) totalDistance ← totalDistance + throw3 avgDistance ← totalDistance / 3 DISPLAY(avgDistance) . A friend points out that they can reduce the complexity of their code by using the abstractions of lists and loops. The programmer decides to &quot;refactor&quot; the code, to rewrite it so that it produces the same output but is structured better. . Which of these is the best refactor of the code? These are all closed so you can see each without being eye-bombed. . a targetDistance ← 90 throws ← [85.2, 82.8, 87.3] totalDistance ← 0 FOR EACH throw IN throws { DISPLAY(targetDistance - throw) totalDistance ← totalDistance + throw } avgDistance ← totalDistance / LENGTH(throws) DISPLAY(avgDistance) b targetDistance ← 90 throws ← [85.2, 82.8, 87.3] totalDistance ← 0 FOR EACH throw IN throws { DISPLAY(targetDistance - throw) totalDistance ← totalDistance + throw } avgDistance ← totalDistance / 3 DISPLAY(avgDistance) c targetDistance ← 90 throws ← [85.2, 82.8, 87.3] totalDistance ← 0 FOR EACH throw IN throws { DISPLAY(targetDistance - throw) totalDistance ← totalDistance + throw avgDistance ← totalDistance / LENGTH(throws) } DISPLAY(avgDistance) d targetDistance ← 90 throws ← [85.2, 82.8, 87.3] FOR EACH throw IN throws { totalDistance ← 0 DISPLAY(targetDistance - throw) totalDistance ← totalDistance + throw avgDistance ← totalDistance / LENGTH(throws) } DISPLAY(avgDistance) e targetDistance ← 90 throws ← [85.2, 82.8, 87.3] FOR EACH throw IN throws { totalDistance ← 0 DISPLAY(targetDistance - throw) totalDistance ← totalDistance + throw } avgDistance ← totalDistance / LENGTH(throws) DISPLAY(avgDistance) Answer! Correct answer: a The following code snippet processes a list of strings with a loop and conditionals: . { words ← [&quot;cab&quot;, &quot;lab&quot;, &quot;cable&quot;, &quot;cables&quot;, &quot;bales&quot;, &quot;bale&quot;] wordScore ← 0 FOR EACH word IN words { IF (LEN(word) ≥ 5) { wordScore ← wordScore + 3 } ELSE { IF (LEN(word) ≥ 4) { wordScore ← wordScore + 2 } ELSE { IF (LEN(word) ≥ 3) { wordScore ← wordScore + 1 } } } } DISPLAY(wordScore) } . The code relies on one string procedure, LEN(string), which returns the number of characters in the string. What value will this program display? . Answer! Correct answer: 13 Examples . Sorting algorithms . Insertion Sort: . Takes in unsorted list with numerical elements and returns with numerical elements in order | iterates through every element one at a time | check if element before the selected element is greater than or less than the selected element and adjust accordingly | . arr = [9,1,5,6,3,7,2,8] print(f&quot;array before sort {arr}&quot;) def insertion_sort(arr): for index in range(1,len(arr)): # repeats through length of the array value = arr[index] i = index - 1 while i &gt;= 0: if value &lt; arr[i]: arr[i+1] = arr[i] # shift number in slot i to the right arr[i] = value # shift value left into slot i i = i - 1 else: break IS = insertion_sort(arr) print(f&quot;array after sort {arr}&quot;) . array before sort [9, 1, 5, 6, 3, 7, 2, 8] array after sort [1, 2, 3, 5, 6, 7, 8, 9] . Homework . Sources . AP Classroom/AP Classroom Website | Khan Academy APCSP module | Coursera python courss by UMich | . &lt;/div&gt; .",
            "url": "https://pgk-lang.github.io/pgk/lesson/ten",
            "relUrl": "/lesson/ten",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Section 8 - Iteration",
            "content": "Big Ideas . Understanding What is Iteration | Using for and while loops | . Necessary Vocabulary . Iteration - Repitition of a Process | For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated | While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met | Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. | Condition - Allows the computer to know whether or not to keep repeating the loop. | increment/decrement - Modifies the counter variable after each repetition. | . What is Iteration? . Iterative statements are also called loops, and they repeat themselves over and over until the condition for stopping is met. . In College Board&#39;s Pseudocode, the first is a REPEAT n TIMES loop, where the n represents some number. . . The second type of loop is a REPEAT UNTIL (condition) loop, where the loop will continue to run until a condition is met. . . Conceptually, a while loop is very similar to an if conditional, except that a while is continually executed until it&#39;s no longer true and an if is only executed once. . Practice . Consider the Following Code Segment. What is the Counter Variable and the Condition set as? . for (var i = 10; i &gt; 0; i--) { println(i); } . Answer! [Counter Variable: 10, Condition: Greater than 0] Practice . Consider the Following Code Segment. How Many times will print(ln) be called? . for (var i = 1; i &lt;= 10; i++) { for (var j = 1; j &lt;= 10; j++) { println(i * j); } } . Answer! [100 Times.The computer will execute the outer for loop 10 times (starting at i = 1 and ending after i = 10). Each time that it executes the outer loop, it will execute the inner for loop 10 times (starting at j = 1 and ending after j = 10). Each inner execution will call println() once.10 times 10 times 1 is 100, so the computer will call println() 100 times.] Practice . Consider the Following Code Segment. What is it initial value? What does the while loop check? . var numRabbits = 2; var numYears = 0; while (numRabbits &lt;= 100) { numRabbits += (numRabbits/2 * 30); numYears++; } . Answer! [2 Rabbits.The while loop checks that the number of rabbits is less than 100. As long as the population is less the 100, the code inside the loop continues to run.] Sources . AP College Board/Classrom | Khan Academy: APCSP | .",
            "url": "https://pgk-lang.github.io/pgk/lesson/eight",
            "relUrl": "/lesson/eight",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Homework for Sections 8 & 10",
            "content": "What you need to do . Exercises . Complete the exercises and add screenshots of your completed code to your blog Reflect on what you learned | . | Multiple Choice quiz . Complete the quiz and add screenshots of the questions you got wrong to your blog Reflect on what you learned | If you got everything correct, look at the javascript code used to create the quiz and explain how the use of lists and iteration helps to make the code more efficient | . | Submit your Clean and consolidated review tickets here in the format: . Name (First Last): Link | .",
            "url": "https://pgk-lang.github.io/pgk/homework",
            "relUrl": "/homework",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Lesson Plan For Sections 8 and 10 (Unit 3)",
            "content": "Referenced from the APCSP course &amp; exam description by collegeboard . Goals . Section 8: Iteration 2.A Represent algorithmic processes without using a programming language. | 2.B Implement and apply an algorithm. | 4.B Determine the result of code segments | . | Section 10: Lists 2.A Utilize such as append and remove methods to mutate lists | 2.B Implement and apply an algorithm using iteration | 4.B Determine the result of code segments | . | . Planned Homework/Hacks . Section 8: Implement an algorithmic process with iteration to manipulate data Includes I/O | Write pseudocode | # Manipulate data and filter out odd numbers data = [1,2,3,4,5,6,7,8,9,10] new_data = [] for num in data: if num % 2 == 1: continue else: new_data.append(num) print(data) print(new_data) . | . | Example: Fibonnaci sequence using iteration by use of a while loop. | x = 2 # Uses a while loop to iterate through numbers of the fibonacci sequence and stops at the number that which is a factor of 12 while (True): x = x + (x-1) print(x) if(x % 12 == 0): break . | . | . | Section 10: Compare lists &amp; typical variables Access values by index | Useful for iteration | . | Can be mutated &amp; modified class_list = [&quot;rohin&quot;, &quot;rohin2&quot;, &quot;rohin3&quot;] # removes name from list if false is returned when called for name in class_list: if not bool(input(name)): class_name.remove(name) . | . | | . | .",
            "url": "https://pgk-lang.github.io/pgk/posts/lesson",
            "relUrl": "/posts/lesson",
            "date": " • Nov 17, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Lists & Iteration Exercises",
          "content": "How to use . Below are code editors that you can use to develop answers to our exercises. We don’t have the resources for a cloud-based compiler so you will have to copy what you write into your blog to interperet the output! | . Exercise #1 . Task Reverse a list utilizing features of lists and iteration Hint: Use two parameters with the range function | . | . | Expected Output 5 4 3 2 1 . | . | . Hello list = [1, 2, 3, 4, 5] # Print this list in reverse order Exercise #2 . Task | Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array | Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array | . Expected Output | The sorted array from 1-10 | . . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] # Sort this array using bubble sort .",
          "url": "https://pgk-lang.github.io/pgk/exercises",
          "relUrl": "/exercises",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Lists & Iteration Quiz",
          "content": "// slatty picks .",
          "url": "https://pgk-lang.github.io/pgk/quiz",
          "relUrl": "/quiz",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About",
          "content": "PGK-Lang scrum team fastpages made by Rohin, Varalu, Ryan, and Advay .",
          "url": "https://pgk-lang.github.io/pgk/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "",
          "content": "&lt;/body&gt; &lt;/html&gt; .",
          "url": "https://pgk-lang.github.io/pgk/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pgk-lang.github.io/pgk/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}